#! /usr/bin/env -S Rscript --quiet
# All-in-one slide checker

if (!("docopt" %in% installed.packages())) {
  if (!("pak" %in% installed.packages())) {
    install.packages("docopt")
  } else {
    pak::pak("docopt")
  }
}
if (!("lese" %in% installed.packages())) {
  stop("Run 'make install' first to install the service package")
}

library(lese)

version <- paste0(
  "SLDS Lecture Checker 0.4\n",
  "lese v",
  packageVersion("lese"),
  "\n"
)
doc <- 'SLDS Lecture Checker.

Usage:
  lecheck [compile] [compare] [clean] [--lecture=<lc>] [--topic=<tc>] [--slide=<sn>] [--preclean] [--no-margin] [--background] [--pdf-copy] [--verbose] [--tinytex] [--docker]
  lecheck compile [--pdf-copy] [--tinytex] [--docker] [--background]
  lecheck compare [--no-comparison-pdf] [--background]
  lecheck clean [--background]
  lecheck everything [--no-comparison-pdf] [--background]
  lecheck list [--lecture=<lc>] [--topic=<tc>]
  lecheck (-h | --help)
  lecheck --version

Example:
  lecheck compile -l i2ml
  lecheck compile -t cart
  lecheck compare -s slides-basics-riskminimization
  lecheck clean -l i2ml
  lecheck list

Options:
  -h --help             Show this screen.
  --version             Show version.
  everything            Runs check_slides_many(), which saves results to a file rather than displaying them.
  list                  List all lectures and topics found in this directory.
  -l --lecture=<lc>     Lecture repository, e.g. "lecture_i2ml".
                        Can be abbreviated (dropping "lecture_" prefix) [default: NULL].
  -t --topic=<tc>       Lecture topic, e.g. "cart".
                        Assumed to be unique across lectures.
                        Takes precedence over --lecture [default: NULL].
  -s --slide=<sn>       Slide name, e.g. slides-boosting-cwb-basics.
                        No need for file extension etc. [default: NULL].
                        Takes precedence over --lecture and --topic.
  --no-margin           If set, compiles slides without speaker margin, i.e. 4:3 layout.
  --pdf-copy            Copy rendered slides to slides-pdf/<slide-name>.tex.
  --no-comparison-pdf   Do not render comparison PDFs to comparison/.
  --preclean            Cleans up using `latexmk -C` before compilation.
  --tinytex             Use TinyTex latexmk emulation to auto-install missing packages.
  --docker              Use dockerized latexmk for compilation. See ?latexmk_docker().
  --background          Do not wait for compilation for status checks. Not applicable if --tinytex is used.
                        Note that this still enumerates lectures and topics but omits status reports.
'

# Wrap in tryCatch to make --help default behavior when there's an argument error
arguments <- tryCatch(
  docopt::docopt(doc, version = version),
  error = function(e) {
    cli::cli_alert_danger(
      "Argument error: docopt does not understand your commands"
    )
    cat(doc)
  }
)
if (is.null(arguments)) quit(save = "no", status = 1)

if (interactive()) {
  # For debugging
  # arguments <- docopt::docopt(doc, version = version, args = c("compile", "--clean", "--slide=slides-boosting-cwb-basics"))
  #arguments <- docopt::docopt(doc, version = version, args = c("compile", "-t cart", "--no-margin"))
  #arguments <- docopt::docopt(doc, version = version, args = c("compile", "-t cart", "--pdf-copy"))
  #arguments <- tryCatch(docopt::docopt(doc, version = version, args = c("list", "compile")), error = function(e) cat(doc))
  arguments <- docopt::docopt(
    doc,
    version = version,
    args = c("compile", "-l i2ml", "-t cart", "--background")
  )

  print(arguments)
}

# If supplied as e.g. -l i2ml rather than --lecture=i2ml, strip leading whitespace
arguments$topic <- gsub("^\\s*", "", arguments$topic)
arguments$lecture <- gsub("^\\s*", "", arguments$lecture)
arguments$slide <- gsub("^\\s*", "", arguments$slide)

# Subset to only currently relevant lecture
# if (arguments$path == "here") arguments$path <- here::here()

lectures_tbl <- collect_lectures(
  lectures_path = here::here(),
  filter_lectures = lectures()
)

# If slide is specified, takes highest precedence. Then topic, then lecture.
# Ensures that if e.g. slide from advml is set but lecture is i2ml, slide "wins"
if (!(arguments$slide == "NULL")) {
  lectures_tbl <- find_slide_tex(slide_file = arguments$slide)
} else if (!(arguments$topic == "NULL")) {
  lectures_tbl <- lectures_tbl[which(lectures_tbl$topic == arguments$topic), ]
} else if (!(arguments$lecture == "NULL")) {
  if (!grepl(pattern = "^lecture", arguments$lecture)) {
    arguments$lecture <- paste0("lecture_", arguments$lecture)
  }

  lectures_tbl <- lectures_tbl[
    which(lectures_tbl$lecture == arguments$lecture),
  ]
}

stopifnot("No matching slides found." = nrow(lectures_tbl) >= 1)

if (arguments$everything) {
  check_slides_many(
    lectures_tbl,
    pre_clean = arguments$preclean,
    create_comparison_pdf = !arguments$no_comparison_pdf
  )
  quit(save = "no", status = 0)
}

# If we're here and neither compile nor compare, we fall back to listing lectures.
if (!(arguments$compile | arguments$compare | arguments$clean)) {
  arguments$list <- TRUE
}

if (arguments$list) {
  cli::cli_inform("Found:")
  cli::cli_ul(.close = FALSE)
  cli::cli_li("{.val {length(unique(lectures_tbl$lecture))}} lectures")
  cli::cli_li("{.val {length(unique(lectures_tbl$topic))}} topics")
  cli::cli_li("{.val {length(unique(lectures_tbl$tex))}} slide sets")
  cli::cli_end()

  for (current_lecture in unique(lectures_tbl$lecture)) {
    topic_idx <- which(lectures_tbl[["lecture"]] == current_lecture)
    current_lecture_tbl <- lectures_tbl[topic_idx, ]

    n_topics <- length(unique(current_lecture_tbl$topic))
    n_slidesets <- nrow(current_lecture_tbl)

    cli::cli_h1(
      "{current_lecture}: {n_topics} topic{?s}, {n_slidesets} slide set{?s}"
    )

    cli::cli_ul(.close = FALSE)
    for (current_topic in unique(current_lecture_tbl$topic)) {
      nslides <- sum(current_lecture_tbl[["topic"]] == current_topic)

      cli::cli_li("{current_topic}: {nslides} slide sets")
    }
    cli::cli_end()
  }

  quit(save = "no", status = 0)
}

# Iterate over lectures if there are more than one in the current set
# Iteratively creating subsets of the lectures_tbl for the respective scope (lecture / topic / slide)
# is probably not the best solution here but it feels easy to understand and robust enough.
# Can still smartify this.
for (current_lecture in unique(lectures_tbl$lecture)) {
  cli::cli_h1("{current_lecture}")
  current_lecture_tbl <- lectures_tbl[
    lectures_tbl[["lecture"]] == current_lecture,
  ]

  for (current_topic in unique(current_lecture_tbl$topic)) {
    cli::cli_h2("{current_topic}")
    current_topic_tbl <- current_lecture_tbl[
      current_lecture_tbl[["topic"]] == current_topic,
    ]

    for (current_slide in unique(current_topic_tbl$slide_name)) {
      current_slide_tbl <- current_topic_tbl[
        current_topic_tbl[["slide_name"]] == current_slide,
      ]

      if (arguments$clean) {
        cli::cli_alert_info(
          "Cleaning {current_slide_tbl[['slide_name']]}",
          id = current_topic
        )
        clean_slide(
          slide_file = current_slide_tbl[["slide_name"]],
          verbose = arguments$verbose
        )
      }

      if (arguments$compile) {
        if (arguments$tinytex) {
          compile_slide_tinytex(
            current_slide_tbl[["slide_name"]],
            margin = !arguments$no_margin
          )
        }

        if (arguments$docker) {
          method <- "docker"
        } else {
          method = "system"
        }

        res <- compile_slide(
          current_slide_tbl[["slide_name"]],
          margin = !arguments$no_margin,
          check_status = !arguments$background,
          pre_clean = arguments$preclean,
          verbose = arguments$verbose,
          method = method
        )

        if (!arguments$background & !res$passed) {
          cli::cli_alert("Checking log for common errors:")
          found_errors <- check_log(
            current_slide_tbl[["slide_name"]],
            after = 2
          )
          cli::cli_ul("{found_errors}")
        }
      }

      if (arguments$pdf_copy) {
        if (fs::file_exists(current_slide_tbl[["pdf"]])) {
          fs::file_copy(
            current_slide_tbl[["pdf"]],
            current_slide_tbl[["pdf_static"]],
            overwrite = TRUE
          )
        } else {
          cli::cli_alert_warning(
            "Can't copy {fs::path_file(current_slide_tbl[[\"pdf\"]])} to slides-pdf/: Does not exist."
          )
        }
      }

      if (arguments$compare) {
        compare_slide(
          current_slide_tbl[["slide_name"]],
          create_comparison_pdf = !arguments$no_comparison_pdf,
          verbose = TRUE # arguments$verbose
        )
      }
    }
  }
}
quit(save = "no", status = 0)
